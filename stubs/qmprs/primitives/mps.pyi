# Copyright 2023-2025 Qualition Computing LLC.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://github.com/Qualition/qmprs/blob/main/LICENSE
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import matplotlib.pyplot as plt
import numpy as np
import quimb.tensor as qtn
from collections.abc import Sequence
from numpy.typing import NDArray
from quick.primitives import Ket
from typing import Literal, TypeAlias

__all__ = ["MPS"]

UnitaryBlock: TypeAlias = tuple[int, int, list[qtn.Tensor]]
UnitaryLayer: TypeAlias = list[UnitaryBlock]

class MPS:
    statevector: Ket | NDArray[np.complex128] | None
    mps: qtn.MatrixProductState | None
    bond_dimension: int
    num_sites: int
    physical_dimension: int
    def __init__(self, statevector: Ket | NDArray[np.complex128] | None = None, mps: qtn.MatrixProductState | None = None, bond_dimension: int = 64) -> None: ...
    @staticmethod
    def from_statevector(statevector: Ket, max_bond_dimension: int) -> qtn.MatrixProductState: ...
    @staticmethod
    def to_statevector(mps: qtn.MatrixProductState) -> Ket: ...
    @property
    def norm(self) -> float: ...
    @property
    def is_normalized(self) -> bool: ...
    def normalize(self) -> None: ...
    @property
    def orthogonal_center_range(self) -> tuple[int, int]: ...
    @property
    def canonical_form(self) -> Literal['left', 'right', 'unknown']: ...
    def canonicalize(self, mode: Literal['left', 'right'], normalize: bool = False) -> None: ...
    def compress(self, max_bond_dimension: int | None = None, mode: Literal['left', 'right'] | None = None) -> None: ...
    def contract_site(self, sites: Sequence[int]) -> None: ...
    def contract_index(self, index: str) -> None: ...
    def polar_decompose(self, indices: Sequence[int]) -> None: ...
    def permute(self, shape: Literal['lrp', 'lpr']) -> None: ...
    def generate_unitary_layer(self) -> UnitaryLayer: ...
    def generate_bond_D_unitary_layer(self) -> UnitaryLayer: ...
    def apply_unitary_layer(self, unitary_layer: UnitaryLayer, inverse: bool = False) -> None: ...
    def apply_unitary_layers(self, unitary_layers: list[UnitaryLayer], inverse: bool = False) -> None: ...
    def fidelity_with_zero_state(self) -> float: ...
    def draw(self) -> plt.Figure: ...
    def __len__(self) -> int: ...
    def __eq__(self, value: object) -> bool: ...
